plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'org.choongang'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA(Java Persistence API)를 사용하여 데이터베이스와 상호 작용
	implementation 'org.springframework.boot:spring-boot-starter-security' // Spring Security를 사용하여 애플리케이션 보안을 구현
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // Thymeleaf 템플릿 엔진 사용
	implementation 'org.springframework.boot:spring-boot-starter-validation' // 데이터 유효성 검증 기능을 제공
	implementation 'org.springframework.boot:spring-boot-starter-web' // 웹 애플리케이션 개발을 위한 기본적인 라이브러리
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6' // Thymeleaf 템플릿에서 Spring Security 기능을 사용하기 위한 확장 라이브러리
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.3.0' // Thymeleaf 템플릿에서 레이아웃 페이지를 사용하기 위한 확장 라이브러리
	implementation 'org.modelmapper:modelmapper:3.2.1' // 객체 간의 매핑을 간편하게 하는 라이브러리

	compileOnly 'org.projectlombok:lombok' // 롬복
	developmentOnly 'org.springframework.boot:spring-boot-devtools'  // 개발 과정에서 코드 변경 시 자동으로 애플리케이션을 다시 실행
	testRuntimeOnly 'com.h2database:h2' // 테스트용으로 쉽게 사용할 수 있는 메모리 기반 데이터베이스
	runtimeOnly 'com.oracle.database.jdbc:ojdbc11' // Oracle 데이터베이스 연결을 위한 JDBC 드라이버

	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta' // Querydsl JPA 모듈의 의존성. JPA 환경에서 Querydsl을 사용하기 위해 필요
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta' // 컴파일 시점에 엔티티 클래스를 기반으로 Q클래스를 생성하는 데 사용

	annotationProcessor 'jakarta.annotation:jakarta.annotation-api' // Jakarta EE 표준의 어노테이션 API를 제공
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api' // Jakarta EE 표준의 JPA API를 제공
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	annotationProcessor 'org.projectlombok:lombok' // 롬복
	testImplementation 'org.springframework.boot:spring-boot-starter-test' // Spring Boot 테스트 기능을 위한 기본적인 라이브러리
	testImplementation 'org.springframework.security:spring-security-test' // Spring Security 테스트 기능을 위한 라이브러리
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher' // JUnit 플랫폼 실행기
}

tasks.named('test') { // 테스트에 JUnit 플랫폼을 사용하도록 설정
	useJUnitPlatform()
}

// Gradle에서 Querydsl을 사용하기 위한 설정
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile
// Querydsl에서 생성된 코드를 저장할 디렉토리를 설정
// dir("generated/querydsl 이 디렉토리 안에 "generated/querydsl" 서브 디렉토리를 생성
// 결과를 File 객체로 변환

sourceSets {
	main.java.srcDirs += [ querydslDir ] // 디렉토리 추가
	// Querydsl이 생성한 코드를 컴파일 과정에서 인식하도록 함
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
	// 컴파일 과정에서 생성된 소스 코드의 출력 디렉토리를 querydslDir 디렉토리로 설정
	// Querydsl이 생성한 코드를 빌드 과정에서 적절한 위치에 저장
}

clean.doLast {
	file(querydslDir).deleteDir()
	// 빌드 과정이 끝나면 Querydsl이 생성한 코드가 삭제되도록 설정
}
